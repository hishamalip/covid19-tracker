{"version":3,"sources":["Components/Header.js","Components/WorldCards.js","Components/World.js","Components/IndiaCards.js","Components/India.js","Components/KeralaCards.js","Components/Kerala.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","collapseOnSelect","expand","bg","variant","to","className","Toggle","aria-controls","Collapse","id","Nav","Link","href","React","Component","WorldCards","state","worldcards_data","axios","get","then","reponse","setState","data","Container","fluid","Row","Col","sm","CardDeck","Card","as","Body","Title","this","cases","Text","todayCases","active","deaths","todayDeaths","recovered","World","renderTable","world_data","map","item","index","key","country","critical","sortData","sort","a","b","textA","toUpperCase","textB","response","Table","responsive","bordered","hover","size","onClick","style","cursor","class","marginLeft","IndiaCards","indiacards_data","India","props","Object","keys","all_districts","districtData","total_confirmed","total_newcases","total_deaths","total_newdeaths","total_recovered","total_active","district_list","x","confirmed","delta","deceased","ob","push","district_rows","district_name","Accordion","eventKey","Button","marginRight","Badge","distrct_data","KeralaCards","district_data","Kerala","district_names","total_cases","total_today_cases","active_cases","total_today_deaths","total_today_recovered","reverse","text-center","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63e6b120.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <Navbar collapseOnSelect expand=\"xl\" bg=\"dark\" variant=\"dark\">\n                <Link to=\"/covid19-tracker/\" className=\"navbar-brand\">Covid-19 Tracker</Link>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Link className=\"nav-link\" to=\"/covid19-tracker/\">World</Link>\n                        <Link className=\"nav-link\" to=\"/covid19-tracker/india/\">India</Link>\n                        <Link className=\"nav-link\" to=\"/covid19-tracker/kerala/\">Kerala</Link>\n                    </Nav>\n                    <Nav>\n                        <Nav.Link href=\"https://github.com/hishamalip/covid19-tracker/\">Github</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n\nexport default Header;\n","import React from 'react';\nimport axios from 'axios';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { CardDeck, Card } from 'react-bootstrap';\n\nclass WorldCards extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            worldcards_data: {}\n        }\n    }\n\n    componentWillMount() {\n        axios.get(\"https://disease.sh/v2/all\").then(reponse => {\n            this.setState({\n                worldcards_data: reponse.data\n            })\n        });\n    }\n\n    render() {\n        return (\n            <Container fluid className=\"text-center\">\n                <Row>\n                    <Col sm=\"2\"> <h2>World</h2> </Col>\n                </Row>\n                \n                <Row>\n                    <Col sm>\n                        <CardDeck>\n                            <Card bg=\"primary\">\n                                <Card.Header as=\"h4\">Total Cases</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{this.state.worldcards_data.cases}</Card.Title>\n                                    <Card.Text>\n                                        Today : {this.state.worldcards_data.todayCases}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n\n                            <Card bg=\"warning\">\n                                <Card.Header as=\"h4\">Active Cases</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{this.state.worldcards_data.active}</Card.Title>\n                                    <Card.Text>\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n\n                            <Card bg=\"danger\">\n                                <Card.Header as=\"h4\">Total Death</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{this.state.worldcards_data.deaths}</Card.Title>\n                                    <Card.Text>\n                                        Today : {this.state.worldcards_data.todayDeaths}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n\n                            <Card bg=\"success\">\n                                <Card.Header as=\"h4\">Total Recovered</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{this.state.worldcards_data.recovered}</Card.Title>\n                                    <Card.Text>\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                        </CardDeck>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default WorldCards;","import React from 'react';\nimport axios from 'axios';\nimport Table from 'react-bootstrap/Table';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport WorldCards from './WorldCards';\n\nclass World extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            world_data: [],\n            sort: 0\n        }\n    }\n\n    componentWillMount() {\n        axios.get(\"https://disease.sh/v2/countries\").then(response => {\n            this.setState({\n                world_data: response.data\n            });\n        });\n    }\n\n    renderTable = () => {\n        return this.state.world_data.map((item, index) => {\n            return (\n                <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td className=\"table-active\">{item.country}</td>\n                    <td className=\"table-primary\">{item.cases}</td>\n                    <td className=\"table-warning\">{item.todayCases}</td>\n                    <td className=\"table-danger\">{item.deaths}</td>\n                    <td>{item.todayDeaths}</td>\n                    <td className=\"table-success\">{item.recovered}</td>\n                    <td>{item.active}</td>\n                    <td>{item.critical}</td>\n                </tr>\n            );\n        })\n    }\n\n    sortData = () => {\n        const sort=this.state.sort\n        this.setState({\n            world_data: this.state.world_data.sort(function (a, b) {\n                var textA = a.country.toUpperCase();\n                var textB = b.country.toUpperCase();\n                if (sort)\n                    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n                else\n                    return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n            }),\n            sort: !this.state.sort\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Container fluid>\n                    <Row>\n                        <Col>\n                            <WorldCards />\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        &nbsp;\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <Table responsive bordered hover size=\"sm\">\n                                <thead className=\"thead-dark\">\n                                    <tr>\n                                        <th>#</th>\n                                        <th onClick={this.sortData} style={{cursor:\"pointer\"}}>\n                                            Country / Other\n                                            <i class={!this.state.sort ? \"fa fa-caret-up\" : \"fa fa-caret-down\"} style={{ marginLeft: \"20px\" }} onClick={this.sortData} />\n                                        </th>\n                                        <th className=\"bg-primary\">Total Cases</th>\n                                        <th className=\"bg-warning\">New Cases</th>\n                                        <th className=\"bg-danger\">Total Deaths</th>\n                                        <th>New Deaths</th>\n                                        <th className=\"bg-success\">Recovered</th>\n                                        <th>Active Cases</th>\n                                        <th>Serious / Critical</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.renderTable()}\n                                </tbody>\n                            </Table>\n                        </Col>\n                    </Row>\n\n                </Container>\n            </div>\n\n        );\n    }\n}\n\nexport default World;","import React from 'react';\nimport axios from 'axios';\nimport { Container, Row, Col } from 'react-bootstrap'; \nimport { CardDeck, Card } from 'react-bootstrap';\n\nclass IndiaCards extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            indiacards_data : []\n        }\n    }\n\n    componentWillMount() {\n        axios.get(\"https://disease.sh/v2/countries/india\").then(response => {\n            this.setState({\n                indiacards_data: response.data\n            })\n        });\n\n    }\n\n    render() {\n        return (\n            <Container fluid className=\"text-center\">\n                <Row>\n                    <Col sm=\"2\"> <h2>India</h2> </Col>\n                </Row>\n                <Row>\n                    <Col sm>\n                        <CardDeck>\n                            <Card bg=\"primary\">\n                                <Card.Header as=\"h4\">Total Cases</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{this.state.indiacards_data.cases}</Card.Title>\n                                    <Card.Text>\n                                        Today : {this.state.indiacards_data.todayCases}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n\n                            <Card bg=\"warning\">\n                                <Card.Header as=\"h4\">Active Cases</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{this.state.indiacards_data.active}</Card.Title>\n                                    <Card.Text>\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n\n                            <Card bg=\"danger\">\n                                <Card.Header as=\"h4\">Total Death</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{this.state.indiacards_data.deaths}</Card.Title>\n                                    <Card.Text>\n                                        Today : {this.state.indiacards_data.todayDeaths}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n\n                            <Card bg=\"success\">\n                                <Card.Header as=\"h4\">Total Recovered</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{this.state.indiacards_data.recovered}</Card.Title>\n                                    <Card.Text>\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                        </CardDeck>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default IndiaCards;","import React from 'react';\nimport axios from 'axios';\n\nimport IndiaCards from './IndiaCards';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Accordion, Card } from 'react-bootstrap';\nimport { Table, Badge, Button } from 'react-bootstrap';\n\nclass India extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {},\n            distrct_data: {}\n        }\n    }\n\n    componentWillMount() {\n        axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(response => {\n            this.setState(\n                { data: response.data }\n            );\n        });\n    }\n\n    renderTable=()=>{\n        let all_state_names = Object.keys(this.state.data);\n\n        return all_state_names.map((item, index) => {\n\n            let all_districts = this.state.data[item].districtData;\n\n            let total_confirmed = 0; let total_newcases = 0;\n            let total_deaths = 0; let total_newdeaths = 0;\n            let total_recovered = 0; let total_active = 0;\n\n            let district_list = [];\n            for (let x in all_districts) {\n                total_confirmed += all_districts[x].confirmed;\n                total_newcases += all_districts[x].delta.confirmed;\n                total_deaths += all_districts[x].deceased;\n                total_newdeaths += all_districts[x].delta.deceased;\n                total_recovered += all_districts[x].recovered;\n                total_active += all_districts[x].active;\n\n                let ob = all_districts[x];\n                ob[\"district_name\"] = x;\n                district_list.push(ob);\n            }\n\n            let district_rows = district_list.map((item, index) => {\n                return (\n                    <tr>\n                        <td>{index + 1}</td>\n                        <td>{item.district_name}</td>\n                        <td>{item.confirmed}</td>\n                        <td>{item.delta.confirmed}</td>\n                        <td>{item.deceased}</td>\n                        <td>{item.delta.deceased}</td>\n                        <td>{item.recovered}</td>\n                        <td>{item.active}</td>\n                    </tr>\n                );\n            });\n\n            return (\n                <Card>\n                    <Accordion.Toggle as={Card.Header} variant=\"primary\" eventKey={index} className=\"font-weight-bold\">\n                        <Button variant=\"dark\" style={ {marginRight:\"10px\"}}>{item}</Button>\n                        <Badge variant=\"secondary\">Confirmed-{total_confirmed}</Badge>{'  '}\n                        <Badge variant=\"primary\">New Cases-{total_newcases}</Badge>{' '}\n                        <Badge variant=\"secondary\">Deaths-{total_deaths}</Badge>{'  '}\n                        <Badge variant=\"danger\">New Deaths-{total_newdeaths}</Badge>{'  '}\n                        <Badge variant=\"success\">Recoverd-{total_recovered}</Badge>{'  '}\n                        <Badge variant=\"warning\">Active-{total_active}</Badge>{'  '}                        \n                    </Accordion.Toggle>\n\n                    <Accordion.Collapse eventKey={index}>\n                        <Card.Body>\n                            <Table responsive bordered hover size=\"sm\">\n                                <thead className=\"thead-dark\">\n                                    <tr>\n                                        <td>#</td>\n                                        <td>District</td>\n                                        <td className=\"bg-primary\">Confirmed</td>\n                                        <td className=\"bg-warning\">New Cases</td>\n                                        <td className=\"bg-danger\">Deaths</td>\n                                        <td>New Deaths</td>\n                                        <td className=\"bg-success\">Recoverd</td>\n                                        <td>Active</td>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {district_rows}\n                                </tbody>\n                            </Table>\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            );\n        })\n    }\n\n    render() {\n\n        return (\n            <Container fluid>\n                <Row>\n                    <Col>\n                        <IndiaCards />\n                    </Col>\n                </Row>\n\n                <Row>\n                    &nbsp;\n                </Row>\n\n                <Row>\n                    <Col>\n                        <Accordion>\n                            {this.renderTable()}\n                        </Accordion>\n                    </Col>\n\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default India;","import React from 'react';\nimport axios from 'axios';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { CardDeck, Card } from 'react-bootstrap';\n\nclass KeralaCards extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            district_data: {}\n        }\n    }\n\n    componentWillMount() {\n        axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(response => {\n\n            // console.log(Object.keys(response.data.Kerala.districtData));\n\n            this.setState({\n                district_data: response.data.Kerala.districtData\n            });\n        });\n    }\n\n    render() {\n        var district_names = Object.keys(this.state.district_data);\n        let total_cases = 0, total_today_cases = 0;\n        let active_cases = 0;\n        let total_deaths = 0, total_today_deaths = 0;\n        let total_recovered = 0, total_today_recovered = 0;\n\n        district_names.map((item, index) => {\n            total_cases += this.state.district_data[item].confirmed;\n            total_today_cases += this.state.district_data[item].delta.confirmed;\n            active_cases += this.state.district_data[item].active;\n            total_deaths += this.state.district_data[item].deceased;\n            total_today_deaths += this.state.district_data[item].delta.deceased;\n            total_recovered += this.state.district_data[item].recovered;\n            total_today_recovered += this.state.district_data[item].delta.recovered;\n        })\n\n        return (\n            <Container fluid className=\"text-center\">\n                <Row>\n                    <Col sm=\"2\"> <h2>Kerala</h2> </Col>\n                </Row>\n                <Row>\n                    <Col sm>\n                        <CardDeck>\n                            <Card bg=\"primary\">\n                                <Card.Header as=\"h4\">Total Cases</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{total_cases}</Card.Title>\n                                    <Card.Text>\n                                        Today : {total_today_cases}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n\n                            <Card bg=\"warning\">\n                                <Card.Header as=\"h4\">Active Cases</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{active_cases}</Card.Title>\n                                    <Card.Text>\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n\n                            <Card bg=\"danger\">\n                                <Card.Header as=\"h4\">Total Deaths</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{total_deaths}</Card.Title>\n                                    <Card.Text>\n                                        Today : {total_today_deaths}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n\n                            <Card bg=\"success\">\n                                <Card.Header as=\"h4\">Total Recovered</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{total_recovered}</Card.Title>\n                                    <Card.Text>\n                                        Today : {total_today_recovered}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                        </CardDeck>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default KeralaCards;\n","import React from 'react';\nimport axios from 'axios';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Table } from 'react-bootstrap';\n\nimport KeralaCards from './KeralaCards';\n\nclass Kerala extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            district_data: {},\n            district_names: [],\n            sort: 0\n        }\n    }\n\n    componentWillMount() {\n        axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(response => {\n            this.setState({\n                district_data: response.data.Kerala.districtData,\n                district_names: Object.keys(response.data.Kerala.districtData)\n            });\n        });\n    }\n\n    renderTable = () => {\n        return this.state.district_names.map((item, index) => {\n            return (\n                <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td className=\"table-active\">{item}</td>\n                    <td className=\"table-primary text-center\">{this.state.district_data[item].confirmed}</td>\n                    <td className=\"table-warning text-center\">{this.state.district_data[item].delta.confirmed}</td>\n                    <td className=\"text-center\">{this.state.district_data[item].active}</td>\n                    <td className=\"table-danger text-center\">{this.state.district_data[item].deceased}</td>\n                    <td className=\"text-center\">{this.state.district_data[item].delta.deceased}</td>\n                    <td className=\"table-success text-center\">{this.state.district_data[item].recovered}</td>\n                    <td className=\"text-center\">{this.state.district_data[item].delta.recovered}</td>\n                </tr>\n            );\n        })\n    }\n\n    sortData = () => {\n        this.setState({ district_names: this.state.district_names.reverse(), sort: !this.state.sort })\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <Row>\n                    <Col>\n                        <KeralaCards />\n                    </Col>\n                </Row>\n\n                <Row>\n                    &nbsp;\n                    </Row>\n\n                <Row>\n                    <Col>\n                        <Table responsive bordered hover text-center size=\"sm\">\n                            <thead className=\"thead-dark\">\n                                <tr>\n                                    <th>#</th>\n                                    <th onClick={this.sortData}  style={{cursor:\"pointer\"}}>\n                                        <span>District / Other</span>\n                                        <i class={!this.state.sort ? \"fa fa-caret-up\" : \"fa fa-caret-down\"} style={{ marginLeft: \"20px\" }} onClick={this.sortData} />\n                                    </th>\n                                    <th className=\"bg-primary text-center\">Total Cases</th>\n                                    <th className=\"bg-warning text-center\">New Cases</th>\n                                    <th className=\"text-center\">Active Cases</th>\n                                    <th className=\"bg-danger text-center\">Deaths</th>\n                                    <th className=\"text-center\">New Deaths</th>\n                                    <th className=\"bg-success text-center\">Recoved</th>\n                                    <th className=\"text-center\">New Recovered</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.renderTable()}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container >\n        );\n    }\n}\n\nexport default Kerala;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Header from './Components/Header';\nimport World from './Components/World';\nimport India from './Components/India';\nimport Kerala from './Components/Kerala';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <Header />\n      </div>\n      <Switch>\n        <Route exact path=\"/covid19-tracker/\">\n          <World />\n        </Route>\n\n        <Route path=\"/covid19-tracker/india/\">\n          <India />\n        </Route>\n\n        <Route path=\"/covid19-tracker/kerala/\">\n          <Kerala />\n        </Route>\n      </Switch>\n\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}